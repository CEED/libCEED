// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

#define Sqr(a) ((a)*(a))

// *****************************************************************************
@kernel void SetupMass(void *ctx, CeedInt Q,
                       const int *iOf7, const int *oOf7,
                       const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *x = in + iOf7[0],
//    *J = in + iOf7[1],
//    *w = in + iOf7[2];
//  CeedScalar
//    *rho = out + oOf7[0],
//    *target = out + oOf7[1];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedInt D = 3;
    CeedScalar det = (+ in[iOf7[1]+(0*D+0)*Q+i] *
                          (in[iOf7[1]+(1*D+1)*Q+i]*in[iOf7[1]+(2*D+2)*Q+i] -
                           in[iOf7[1]+(1*D+2)*Q+i]*in[iOf7[1]+(2*D+1)*Q+i])
                      - in[iOf7[1]+(0*D+1)*Q+i] *
                          (in[iOf7[1]+(1*D+0)*Q+i]*in[iOf7[1]+(2*D+2)*Q+i] -
                           in[iOf7[1]+(1*D+2)*Q+i]*in[iOf7[1]+(2*D+0)*Q+i])
                      + in[iOf7[1]+(0*D+2)*Q+i] *
                          (in[iOf7[1]+(1*D+0)*Q+i]*in[iOf7[1]+(2*D+1)*Q+i] -
                           in[iOf7[1]+(1*D+1)*Q+i]*in[iOf7[1]+(2*D+0)*Q+i]));
    out[oOf7[0]+i] = det * in[iOf7[2]+i];
    out[oOf7[1]+i] = sqrt(Sqr(in[iOf7[0]+0*Q+i]) +
                          Sqr(in[iOf7[0]+1*Q+i]) +
                          Sqr(in[iOf7[0]+2*Q+i]));
    out[oOf7[2]+i] = det * in[iOf7[2]+i] *
                       sqrt(Sqr(in[iOf7[0]+0*Q+i]) +
                            Sqr(in[iOf7[0]+1*Q+i]) +
                            Sqr(in[iOf7[0]+2*Q+i]));
  }
}

// *****************************************************************************
@kernel void Mass(void *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *u = in + iOf7[0],
//    *rho = in + iOf7[1],
//    *target = in + iOf7[2];
//  CeedScalar *v = out + oOf7[0];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    out[oOf7[0]+i] = in[iOf7[1]+i] * in[iOf7[0]+i];
  }
}
