// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

#define Sqr(a) ((a)*(a))

// *****************************************************************************
@kernel void Setup(void *ctx, CeedInt Q,
                   const int *iOf7, const int *oOf7,
                   const CeedScalar *in, CeedScalar *out) {
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar
      *x = in + iOf7[0],
      *J = in + iOf7[1],
      *w = in + iOf7[2];
    CeedScalar
      *rho = out + oOf7[0],
      *target = out + oOf7[1];
    const CeedInt D = 3;
    CeedScalar det = (+ J[(0*D+0)*Q+i] * (J[(1*D+1)*Q+i]*J[(2*D+2)*Q+i] - J[(1*D+2)*Q+i]*J[(2*D+1)*Q+i])
                      - J[(0*D+1)*Q+i] * (J[(1*D+0)*Q+i]*J[(2*D+2)*Q+i] - J[(1*D+2)*Q+i]*J[(2*D+0)*Q+i])
                      + J[(0*D+2)*Q+i] * (J[(1*D+0)*Q+i]*J[(2*D+1)*Q+i] - J[(1*D+1)*Q+i]*J[(2*D+0)*Q+i]));
    rho[i] = det * w[i];
    target[i] = sqrt(Sqr(x[0*Q+i]) + Sqr(x[1*Q+i]) + Sqr(x[2*Q+i]));
  }
}

// *****************************************************************************
@kernel void Mass(const bool *residual, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar
      *u = in + iOf7[0],
      *rho = in + iOf7[1],
      *target = in + iOf7[2];
    CeedScalar *v = out + oOf7[0];
    v[i] = rho[i] * (u[i] - (*residual ? target[i] : 0.));
  }
}

// *****************************************************************************
@kernel void Error(void *ctx, CeedInt Q,
                  const int *iOf7, const int *oOf7,
                  const CeedScalar *in, CeedScalar *out) {
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar
      *u = in + iOf7[0],
      *target = in + iOf7[1];
    CeedScalar *err = out + oOf7[0];
    err[i] = u[i] - target[i];
  }
}
