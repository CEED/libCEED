// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

#define Sqr(a) ((a)*(a))

// *****************************************************************************
@kernel void SetupDiff3Rhs(void *ctx, CeedInt Q,
                           const int *iOf7, const int *oOf7,
                           const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *x = in + iOf7[0],
//    *J = in + iOf7[1],
//    *w = in + iOf7[2];
//  CeedScalar
//    *target = out + oOf7[0],
//    *rhs = out + oOf7[1];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar MPI = 3.14159265358979323846;
    const CeedInt D = 3;
    const CeedScalar J11 = in[iOf7[1]+i+Q*0];
    const CeedScalar J21 = in[iOf7[1]+i+Q*1];
    const CeedScalar J31 = in[iOf7[1]+i+Q*2];
    const CeedScalar J12 = in[iOf7[1]+i+Q*3];
    const CeedScalar J22 = in[iOf7[1]+i+Q*4];
    const CeedScalar J32 = in[iOf7[1]+i+Q*5];
    const CeedScalar J13 = in[iOf7[1]+i+Q*6];
    const CeedScalar J23 = in[iOf7[1]+i+Q*7];
    const CeedScalar J33 = in[iOf7[1]+i+Q*8];
    const CeedScalar A11 = J22*J33 - J23*J32;
    const CeedScalar A12 = J13*J32 - J12*J33;
    const CeedScalar A13 = J12*J23 - J13*J22;


    const CeedScalar c[3] = { 0, 1., 2. };
    const CeedScalar k[3] = { 1., 2., 3. };

    out[oOf7[0]+i+0*Q] = sin(M_PI*(c[0] + k[0]*in[iOf7[0]+0*Q+i])) *
                       sin(M_PI*(c[1] + k[1]*in[iOf7[0]+1*Q+i])) *
                       sin(M_PI*(c[2] + k[2]*in[iOf7[0]+2*Q+i]));
    out[oOf7[0]+i+1*Q] = out[oOf7[1]+i+0*Q];
    out[oOf7[0]+i+2*Q] = out[oOf7[1]+i+0*Q];

    const CeedScalar rho = in[iOf7[2]+i] * (J11*A11 + J21*A12 + J31*A13);

    out[oOf7[1]+i+0*Q] = rho * M_PI*M_PI * (k[0]*k[0] + k[1]*k[1] + k[2]*k[2]) *
                           sin(M_PI*(c[0] + k[0]*in[iOf7[0]+0*Q+i])) *
                           sin(M_PI*(c[1] + k[1]*in[iOf7[0]+1*Q+i])) *
                           sin(M_PI*(c[2] + k[2]*in[iOf7[0]+2*Q+i]));
    out[oOf7[1]+i+1*Q] = out[oOf7[2]+i+0*Q];
    out[oOf7[1]+i+2*Q] = out[oOf7[2]+i+0*Q];
  }
}

// *****************************************************************************
@kernel void Diff3(void *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *u = in + iOf7[0],
//    *qdata = in + iOf7[1],
//  CeedScalar *v = out + oOf7[0];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar ug00 = in[iOf7[0]+i+Q*(0+0*3)];
    const CeedScalar ug01 = in[iOf7[0]+i+Q*(0+1*3)];
    const CeedScalar ug02 = in[iOf7[0]+i+Q*(0+2*3)];
    out[oOf7[0]+i+Q*(0+0*3)] = in[iOf7[1]+i+Q*0]*ug00 +
                           in[iOf7[1]+i+Q*1]*ug01 + in[iOf7[1]+i+Q*2]*ug02;
    out[oOf7[0]+i+Q*(0+1*3)] = in[iOf7[1]+i+Q*1]*ug00 +
                           in[iOf7[1]+i+Q*3]*ug01 + in[iOf7[1]+i+Q*4]*ug02;
    out[oOf7[0]+i+Q*(0+2*3)] = in[iOf7[1]+i+Q*2]*ug00 +
                           in[iOf7[1]+i+Q*4]*ug01 + in[iOf7[1]+i+Q*5]*ug02;

    const CeedScalar ug10 = in[iOf7[0]+i+Q*(1+0*3)];
    const CeedScalar ug11 = in[iOf7[0]+i+Q*(1+1*3)];
    const CeedScalar ug12 = in[iOf7[0]+i+Q*(1+2*3)];
    out[oOf7[0]+i+Q*(1+0*3)] = in[iOf7[1]+i+Q*0]*ug10 +
                           in[iOf7[1]+i+Q*1]*ug11 + in[iOf7[1]+i+Q*2]*ug12;
    out[oOf7[0]+i+Q*(1+1*3)] = in[iOf7[1]+i+Q*1]*ug10 +
                           in[iOf7[1]+i+Q*3]*ug11 + in[iOf7[1]+i+Q*4]*ug12;
    out[oOf7[0]+i+Q*(1+2*3)] = in[iOf7[1]+i+Q*2]*ug10 +
                           in[iOf7[1]+i+Q*4]*ug11 + in[iOf7[1]+i+Q*5]*ug12;

    const CeedScalar ug20 = in[iOf7[0]+i+Q*(2+0*3)];
    const CeedScalar ug21 = in[iOf7[0]+i+Q*(2+1*3)];
    const CeedScalar ug22 = in[iOf7[0]+i+Q*(2+2*3)];
    out[oOf7[0]+i+Q*(2+0*3)] = in[iOf7[1]+i+Q*0]*ug20 +
                           in[iOf7[1]+i+Q*1]*ug21 + in[iOf7[1]+i+Q*2]*ug22;
    out[oOf7[0]+i+Q*(2+1*3)] = in[iOf7[1]+i+Q*1]*ug20 +
                           in[iOf7[1]+i+Q*3]*ug21 + in[iOf7[1]+i+Q*4]*ug22;
    out[oOf7[0]+i+Q*(2+2*3)] = in[iOf7[1]+i+Q*2]*ug20 +
                           in[iOf7[1]+i+Q*4]*ug21 + in[iOf7[1]+i+Q*5]*ug22;
  }
}
