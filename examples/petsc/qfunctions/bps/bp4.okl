// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

#define Sqr(a) ((a)*(a))

// *****************************************************************************
@kernel void SetupDiffRhs3(void *ctx, CeedInt Q,
                           const int *iOf7, const int *oOf7,
                           const CeedScalar *in, CeedScalar *out) {
// Inputs
//  const CeedScalar
//    *x = in + iOf7[0],
//    *J = in + iOf7[1],
//    *w = in + iOf7[2];
// Outputs
//  CeedScalar
//    *true_soln = out + oOf7[0],
//    *rhs       = out + oOf7[1];

  // Quadrature Point Loop
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar J11 = in[iOf7[1]+i+Q*0];
    const CeedScalar J21 = in[iOf7[1]+i+Q*1];
    const CeedScalar J31 = in[iOf7[1]+i+Q*2];
    const CeedScalar J12 = in[iOf7[1]+i+Q*3];
    const CeedScalar J22 = in[iOf7[1]+i+Q*4];
    const CeedScalar J32 = in[iOf7[1]+i+Q*5];
    const CeedScalar J13 = in[iOf7[1]+i+Q*6];
    const CeedScalar J23 = in[iOf7[1]+i+Q*7];
    const CeedScalar J33 = in[iOf7[1]+i+Q*8];
    const CeedScalar A11 = J22*J33 - J23*J32;
    const CeedScalar A12 = J13*J32 - J12*J33;
    const CeedScalar A13 = J12*J23 - J13*J22;

    const CeedScalar c[3] = { 0, 1., 2. };
    const CeedScalar k[3] = { 1., 2., 3. };

    out[oOf7[0]+i+0*Q] = sin(M_PI*(c[0] + k[0]*in[iOf7[0]+0*Q+i])) *
                         sin(M_PI*(c[1] + k[1]*in[iOf7[0]+1*Q+i])) *
                         sin(M_PI*(c[2] + k[2]*in[iOf7[0]+2*Q+i]));
    out[oOf7[0]+i+1*Q] = 2 * out[oOf7[0]+i+0*Q];
    out[oOf7[0]+i+2*Q] = 3 * out[oOf7[0]+i+0*Q];

    const CeedScalar rho = in[iOf7[2]+i] * (J11*A11 + J21*A12 + J31*A13);

    out[oOf7[1]+i+0*Q] = rho * Sqr(M_PI) * (Sqr(k[0]) + Sqr(k[1]) + Sqr(k[2])) *
                         out[oOf7[0]+i+0*Q];
    out[oOf7[1]+i+1*Q] = 2 * out[oOf7[1]+i+0*Q];
    out[oOf7[1]+i+2*Q] = 3 * out[oOf7[1]+i+0*Q];
  } // End of Quadrature Point Loop
}

// *****************************************************************************
@kernel void Diff3(void *ctx, CeedInt Q,
                   const int *iOf7, const int *oOf7,
                   const CeedScalar *in, CeedScalar *out) {
// Inputs
//  const CeedScalar
//    *ug    = in + iOf7[0],
//    *qdata = in + iOf7[1];
// Output
//  CeedScalar *vg = out + oOf7[0];

  // Quadrature Point Loop
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar uJ[3][3]        = {{in[iOf7[0]+i+Q*(0+0*3)],
                                         in[iOf7[0]+i+Q*(0+1*3)],
                                         in[iOf7[0]+i+Q*(0+2*3)]},
                                        {in[iOf7[0]+i+Q*(1+0*3)],
                                         in[iOf7[0]+i+Q*(1+1*3)],
                                         in[iOf7[0]+i+Q*(1+2*3)]},
                                        {in[iOf7[0]+i+Q*(2+0*3)],
                                         in[iOf7[0]+i+Q*(2+1*3)],
                                         in[iOf7[0]+i+Q*(2+2*3)]}
                                       };

    // Read qdata (dXdxdXdxT symmetric matrix)
    const CeedScalar dXdxdXdxT[3][3] = {{in[iOf7[1]+i+Q*0],
                                         in[iOf7[1]+i+Q*1],
                                         in[iOf7[1]+i+Q*2]},
                                        {in[iOf7[1]+i+Q*1],
                                         in[iOf7[1]+i+Q*3],
                                         in[iOf7[1]+i+Q*4]},
                                        {in[iOf7[1]+i+Q*2],
                                         in[iOf7[1]+i+Q*4],
                                         in[iOf7[1]+i+Q*5]}
                                       };

    for (int k=0; k<3; k++) // k = component
      for (int j=0; j<3; j++) // j = direction of vg
        out[oOf7[0]+i+(k+j*3)*Q] = (uJ[k][0] * dXdxdXdxT[0][j] +
                                    uJ[k][1] * dXdxdXdxT[1][j] +
                                    uJ[k][2] * dXdxdXdxT[2][j]);
  } // End of Quadrature Point Loop
}
// *****************************************************************************
