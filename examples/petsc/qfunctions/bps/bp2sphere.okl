// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

#define Sqr(a) ((a)*(a))

// ****************************************************************************
@kernel void SetupMassRhs3(double *ctx, CeedInt Q,
                           const int *iOf7, const int *oOf7,
                           const CeedScalar *in, CeedScalar *out) {
// Inputs
//  const CeedScalar
//    *x      = in + iOf7[0],
//    *qdata  = in + iOf7[1];
// Outputs
//  CeedScalar
//    *target = out + oOf7[0],
//    *rhs    = out + oOf7[1];

  // Quadrature Point Loop
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
  //const struct BuildContext *bc = (struct BuildContext*)ctx;
  const double R = ctx[0];
  // Compute latitude
  const CeedScalar theta =  asin(in[oOf7[0]+i+2*Q] / R);

  // Use absolute value of latitute for true solution
  out[oOf7[0]+i+0*Q] = fabs(theta);
  out[oOf7[0]+i+1*Q] = 2 * out[oOf7[0]+i+0*Q];
  out[oOf7[0]+i+2*Q] = 3 * out[oOf7[0]+i+0*Q];
  out[oOf7[1]+i+0*Q] = in[iOf7[1]+i+0*Q] * out[oOf7[0]+i+0*Q];
  out[oOf7[1]+i+1*Q] = 2 * out[oOf7[1]+i+0*Q];
  out[oOf7[1]+i+2*Q] = 3 * out[oOf7[1]+i+0*Q];
  }
}

// *****************************************************************************
// This QFunction applies the mass operator for a vector field of 3 components.
//
// Inputs:
//   u     - Input vector at quadrature points
//   qdata - Geometric factors
//
// Output:
//   v     - Output vector (test function) at quadrature points
//
// *****************************************************************************
@kernel void Mass3(void *ctx, CeedInt Q,
                   const int *iOf7, const int *oOf7,
                   const CeedScalar *in, CeedScalar *out) {
// Inputs
//  const CeedScalar
//    *u = in + iOf7[0],
//    *qdata = in + iOf7[1];
// Output
//  CeedScalar *v = out + oOf7[0];

  // Quadrature Point Loop
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    out[oOf7[0]+i+0*Q] = in[iOf7[1]+i] * in[iOf7[0]+i+0*Q];
    out[oOf7[0]+i+1*Q] = in[iOf7[1]+i] * in[iOf7[0]+i+1*Q];
    out[oOf7[0]+i+2*Q] = in[iOf7[1]+i] * in[iOf7[0]+i+2*Q];
  }
}
