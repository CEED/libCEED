// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

#define Sqr(a) ((a)*(a))

// *****************************************************************************
@kernel void SetupDiffRhs3(CeedScalar *ctx, CeedInt Q,
                           const int *iOf7, const int *oOf7,
                           const CeedScalar *in, CeedScalar *out) {
// Inputs
//  const CeedScalar
//    *x      = in + iOf7[0],
//    *qdata  = in + iOf7[1];
// Outputs
//  CeedScalar
//    *true_soln = out + oOf7[0],
//    *rhs       = out + oOf7[1];

  // Quadrature Point Loop
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    //const struct BuildContext *bc = (struct BuildContext*)ctx;
    const CeedScalar R = ctx[0];
    // Read global Cartesian coordinates
    CeedScalar x = in[iOf7[0]+i+0*Q], y = in[iOf7[0]+i+1*Q], z = in[iOf7[0]+i+2*Q];
    // Normalize quadrature point coordinates to sphere
    CeedScalar rad = sqrt(x*x + y*y + z*z);
    x *= R / rad;
    y *= R / rad;
    z *= R / rad;
    // Compute latitude and longitude
    const CeedScalar theta  = asin(z / R); // latitude
    const CeedScalar lambda = atan2(y, x); // longitude

    out[oOf7[0]+i+0*Q] = sin(lambda) * cos(theta);
    out[oOf7[0]+i+1*Q] = 2 * out[oOf7[0]+i+0*Q];
    out[oOf7[0]+i+2*Q] = 3 * out[oOf7[0]+i+0*Q];
    out[oOf7[1]+i+0*Q] = in[iOf7[1]+i+0*Q] * 2 * sin(lambda)*cos(theta) / (R*R);
    out[oOf7[1]+i+1*Q] = 2 * out[oOf7[1]+i+0*Q];
    out[oOf7[1]+i+2*Q] = 3 * out[oOf7[1]+i+0*Q];

  } // End of Quadrature Point Loop
}

// *****************************************************************************
// This QFunction applies the diffusion operator for a vector field.
//
// Inputs:
//   ug     - Input vector gradient at quadrature points
//   qdata  - Geometric factors
//
// Output:
//   vg     - Output vector (test function) gradient at quadrature points
//
// *****************************************************************************
@kernel void Diff3(void *ctx, CeedInt Q,
                   const int *iOf7, const int *oOf7,
                   const CeedScalar *in, CeedScalar *out) {
// Inputs
//  const CeedScalar
//    *uJ    = in + iOf7[0],
//    *qdata = in + iOf7[1];
// Output
//  CeedScalar *vg = out + oOf7[0];

  // Quadrature Point Loop
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    // Read spatial derivatives of u
    const CeedScalar uJ[3][2]        = {{in[iOf7[0]+i+(0+0*3)*Q],
                                         in[iOf7[0]+i+(0+1*3)*Q]},
                                        {in[iOf7[0]+i+(1+0*3)*Q],
                                         in[iOf7[0]+i+(1+1*3)*Q]},
                                        {in[iOf7[0]+i+(2+0*3)*Q],
                                         in[iOf7[0]+i+(2+1*3)*Q]}
                                       };
    // Read qdata
    const CeedScalar wJ              =   in[iOf7[1]+i+Q*0];
    // -- Grad-to-Grad qdata
    // ---- dXdx_j,k * dXdx_k,j
    const CeedScalar dXdxdXdxT[2][2] = {{in[iOf7[1]+i+Q*1],
                                         in[iOf7[1]+i+Q*3]},
                                        {in[iOf7[1]+i+Q*3],
                                         in[iOf7[1]+i+Q*2]}
                                       };

    for (int k=0; k<3; k++) // k = component
      for (int j=0; j<2; j++) // j = direction of vg
        out[oOf7[0]+i+(k+j*3)*Q] = wJ * (uJ[k][0] * dXdxdXdxT[0][j] +
                                         uJ[k][1] * dXdxdXdxT[1][j]);

  } // End of Quadrature Point Loop
}
