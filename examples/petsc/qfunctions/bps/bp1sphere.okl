// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

#define Sqr(a) ((a)*(a))

// *****************************************************************************
// This QFunction sets up the geometric factor required for integration when
//   reference coordinates have a different dimension than the one of
//   physical coordinates
//
// Reference (parent) 2D coordinates: X \in [-1, 1]^2
//
// Global 3D physical coordinates given by the mesh: xx \in [-R, R]^3
//   with R radius of the sphere
//
// Local 3D physical coordinates on the 2D manifold: x \in [-l, l]^3
//   with l half edge of the cube inscribed in the sphere
//
// Change of coordinates matrix computed by the library:
//   (physical 3D coords relative to reference 2D coords)
//   dxx_j/dX_i (indicial notation) [3 * 2]
//
// Change of coordinates x (on the 2D manifold) relative to xx (phyisical 3D):
//   dx_i/dxx_j (indicial notation) [3 * 3]
//
// Change of coordinates x (on the 2D manifold) relative to X (reference 2D):
//   (by chain rule)
//   dx_i/dX_j = dx_i/dxx_k * dxx_k/dX_j [3 * 2]
//
// detJ is given by the magnitude of the cross product of the columns of dx_i/dX_j
//
// The quadrature data is stored in the array qdata.
//
// We require the determinant of the Jacobian to properly compute integrals of
//   the form: int( u v )
//
// Qdata: detJ * w
//
// *****************************************************************************
@kernel void SetupMassGeo(void *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
// Inputs
//  const CeedScalar
//    *X     = in + iOf7[0];
//    *dxxdX = in + iOf7[1],
//    *w     = in + iOf7[2];
// Outputs
//  CeedScalar
//    *qdata = out + oOf7[0];

  // Quadrature Point Loop
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    // Read global Cartesian coordinates
    const CeedScalar xx[3] = {in[iOf7[0]+0*Q+i],
                              in[iOf7[0]+1*Q+i],
                              in[iOf7[0]+2*Q+i]
                             };
    // Read dxxdX Jacobian entries, stored as
    // 0 3
    // 1 4
    // 2 5
    const CeedScalar dxxdX[3][2] = {{in[iOf7[1]+0*Q+i],
                                     in[iOf7[1]+3*Q+i]},
                                    {in[iOf7[1]+1*Q+i],
                                     in[iOf7[1]+4*Q+i]},
                                    {in[iOf7[1]+2*Q+i],
                                     in[iOf7[1]+5*Q+i]}
                                    };

    // Setup
    // x = xx (xx^T xx)^{-1/2}
    // dx/dxx = I (xx^T xx)^{-1/2} - xx xx^T (xx^T xx)^{-3/2}
    const CeedScalar modxxsq = Sqr(xx[0]) + Sqr(xx[1]) + Sqr(xx[2]);
    CeedScalar xxsq[3][3];
    for (int j=0; j<3; j++)
      for (int k=0; k<3; k++)
        xxsq[j][k] = xx[j]*xx[k] / (sqrt(modxxsq) * modxxsq);

    const CeedScalar dxdxx[3][3] = {{1./sqrt(modxxsq) - xxsq[0][0],
                                     -xxsq[0][1],
                                     -xxsq[0][2]},
                                    {-xxsq[1][0],
                                     1./sqrt(modxxsq) - xxsq[1][1],
                                     -xxsq[1][2]},
                                    {-xxsq[2][0],
                                     -xxsq[2][1],
                                     1./sqrt(modxxsq) - xxsq[2][2]}
                                   };

    CeedScalar dxdX[3][2];
    for (int j=0; j<3; j++)
      for (int k=0; k<2; k++) {
        dxdX[j][k] = 0;
        for (int l=0; l<3; l++)
          dxdX[j][k] += dxdxx[j][l]*dxxdX[l][k];
      }

    // J is given by the cross product of the columns of dxdX
    const CeedScalar J[3] = {dxdX[1][0]*dxdX[2][1] - dxdX[2][0]*dxdX[1][1],
                             dxdX[2][0]*dxdX[0][1] - dxdX[0][0]*dxdX[2][1],
                             dxdX[0][0]*dxdX[1][1] - dxdX[1][0]*dxdX[0][1]
                            };
    // Use the magnitude of J as our detJ (volume scaling factor)
    const CeedScalar modJ = sqrt(Sqr(J[0]) + Sqr(J[1]) + Sqr(J[2]));
    out[oOf7[0]+i] = modJ * in[iOf7[2]+i];
  }
}

// *****************************************************************************
@kernel void SetupMassRhs(CeedScalar *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
// Inputs
//  const CeedScalar
//    *x      = in + iOf7[0],
//    *qdata  = in + iOf7[1];
// Outputs
//  CeedScalar
//    *true_soln = out + oOf7[0],
//    *rhs       = out + oOf7[1];

  // Quadrature Point Loop
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    //const struct BuildContext *bc = (struct BuildContext*)ctx;
    const CeedScalar R = ctx[0];
    // Compute latitude
    const CeedScalar theta =  asin(in[oOf7[0]+i+2*Q] / R);

    // Use absolute value of latitute for true solution
    out[oOf7[0]+i+0*Q] = fabs(theta);
    out[oOf7[1]+i+0*Q] = in[iOf7[1]+i+0*Q] * out[oOf7[0]+i+0*Q];
  }
}

// *****************************************************************************
// This QFunction applies the mass operator for a scalar field.
//
// Inputs:
//   u     - Input vector at quadrature points
//   qdata - Geometric factors
//
// Output:
//   v     - Output vector (test function) at quadrature points
//
// *****************************************************************************
@kernel void Mass(void *ctx, CeedInt Q,
                  const int *iOf7, const int *oOf7,
                  const CeedScalar *in, CeedScalar *out) {
// Inputs
//  const CeedScalar
//    *u     = in + iOf7[0],
//    *qdata = in + iOf7[1];
// Output
//  CeedScalar *v = out + oOf7[0];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    out[oOf7[0]+i] = in[iOf7[1]+i] * in[iOf7[0]+i];
  }
}
