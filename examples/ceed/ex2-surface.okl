// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

// *****************************************************************************
@kernel void f_build_diff(int *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *J = in + iOf7[0];
//    *w = in + iOf7[1];
//  CeedScalar
//    in 1D:
//    *qdata = out + oOf7[0];
//    in 2D:
//    *qdata[] = {out + oOf7[0], out[oOf7[0]+i], out[oOf7[0]+i]}
//    in 3D:
//    *qdata[] = {out + oOf7[0], out[oOf7[1]+i], out[oOf7[2]+i],
//                out + oOf7[3], out[oOf7[4]+i], out[oOf7[5]+i]}
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    //const struct BuildContext *bc = (struct BuildContext*)ctx;
    const int dim = ctx[0];
    const int space_dim = ctx[1];
    const CeedInt dims = dim + 10*space_dim;
    if (dims==11) out[oOf7[0]+0*Q+i] = in[iOf7[1]+i] / in[iOf7[0]+i];
    if (dims==22) {
      const CeedScalar J11 = in[iOf7[0]+i+Q*0];
      const CeedScalar J21 = in[iOf7[0]+i+Q*1];
      const CeedScalar J12 = in[iOf7[0]+i+Q*2];
      const CeedScalar J22 = in[iOf7[0]+i+Q*3];
      const CeedScalar qw = in[iOf7[1]+i] / (J11*J22 - J21*J12);
      out[oOf7[0]+0*Q+i] =   qw * (J12*J12 + J22*J22);
      out[oOf7[0]+1*Q+i] =   qw * (J11*J11 + J21*J21);
      out[oOf7[0]+2*Q+i] = - qw * (J11*J12 + J21*J22);
    }
    if (dims==33) {
      // Compute the adjoint
      CeedScalar A[3][3];
      for (CeedInt j=0; j<3; j++)
        for (CeedInt k=0; k<3; k++)
          A[k][j] = in[iOf7[0]+i+Q*((j+1)%3+3*((k+1)%3))]*in[iOf7[0]+i+Q*((j+2)%3+3*((k+2)%3))] -
                    in[iOf7[0]+i+Q*((j+1)%3+3*((k+2)%3))]*in[iOf7[0]+i+Q*((j+2)%3+3*((k+1)%3))];

      // Compute quadrature weight / det(J)
      const CeedScalar qw = in[iOf7[1]+i] / (in[iOf7[0]+i+Q*0]*A[0][0] + in[iOf7[0]+i+Q*1]*A[1][1] +
                                             in[iOf7[0]+i+Q*2]*A[2][2]);

      // Compute geometric factors
      // Stored in Voigt convention
      // 0 5 4
      // 5 1 3
      // 4 3 2
      out[oOf7[0]+0*Q+i] = qw * (A[0][0]*A[0][0] + A[0][1]*A[0][1] + A[0][2]*A[0][2]);
      out[oOf7[0]+1*Q+i] = qw * (A[1][0]*A[1][0] + A[1][1]*A[1][1] + A[1][2]*A[1][2]);
      out[oOf7[0]+2*Q+i] = qw * (A[2][0]*A[2][0] + A[2][1]*A[2][1] + A[2][2]*A[2][2]);
      out[oOf7[0]+3*Q+i] = qw * (A[1][0]*A[2][0] + A[1][1]*A[2][1] + A[1][2]*A[2][2]);
      out[oOf7[0]+4*Q+i] = qw * (A[0][0]*A[2][0] + A[0][1]*A[2][1] + A[0][2]*A[2][2]);
      out[oOf7[0]+5*Q+i] = qw * (A[0][0]*A[1][0] + A[0][1]*A[1][1] + A[0][2]*A[1][2]);
    }
  }
}
// -----------------------------------------------------------------------------

// *****************************************************************************
// This QFunction applies the diffusion operator for a scalar field.
//
// Inputs:
//   ug     - Input vector at quadrature points
//   qdata - Geometric factors
//
// Output:
//   vg     - Output vector (test function) at quadrature points
//
// *****************************************************************************

// -----------------------------------------------------------------------------
@kernel void f_apply_diff(int *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {

// Inputs
//   const CeedScalar
//     *ug      = in + iOf7[0],
//     *qdata   = in + iOf7[1],
// Outputs
//   CeedScalar *vg = out + oOf7[0];

// Quadrature Point Loop
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {

    //const struct BuildContext *bc = (struct BuildContext*)ctx;
    const int dim = ctx[0];
    const int space_dim = ctx[1];
    const CeedInt dims = dim + 10*space_dim;
    if (dims==11) out[oOf7[0]+i] = in[iOf7[1]+0*Q+i] * in[iOf7[0]+0*Q+i];
    if (dims==22) {
      // Read qdata (dXdxdXdxT symmetric matrix)
      // Stored in Voigt convention
      // 0 2
      // 2 1
      // *INDENT-OFF*
      const CeedScalar dXdxdXdxT[2][2] = {{in[iOf7[1]+i+Q*0],
                                           in[iOf7[1]+i+Q*2]},
                                          {in[iOf7[1]+i+Q*2],
                                           in[iOf7[1]+i+Q*1]}};
      // *INDENT-ON*
      // j = direction of vg
      for (int j=0; j<2; j++)
        out[oOf7[0]+i + j*Q] = (in[iOf7[0]+i+Q*0] * dXdxdXdxT[0][j] +
                                in[iOf7[0]+i+Q*1] * dXdxdXdxT[1][j]);
    }
    if (dims==33) {
      // Read qdata (dXdxdXdxT symmetric matrix)
      // Stored in Voigt convention
      // 0 5 4
      // 5 1 3
      // 4 3 2
      // *INDENT-OFF*
      const CeedScalar dXdxdXdxT[3][3] = {{in[iOf7[1]+i+Q*0],
                                           in[iOf7[1]+i+Q*5],
                                           in[iOf7[1]+i+Q*4]},
                                          {in[iOf7[1]+i+Q*5],
                                           in[iOf7[1]+i+Q*1],
                                           in[iOf7[1]+i+Q*3]},
                                          {in[iOf7[1]+i+Q*4],
                                           in[iOf7[1]+i+Q*3],
                                           in[iOf7[1]+i+Q*2]}
                                         };
      // *INDENT-ON*
      // j = direction of vg
      for (int j=0; j<3; j++)
        out[oOf7[0]+i + j*Q] = (in[iOf7[0]+i+Q*0] * dXdxdXdxT[0][j] +
                                in[iOf7[0]+i+Q*1] * dXdxdXdxT[1][j] +
                                in[iOf7[0]+i+Q*2] * dXdxdXdxT[2][j]);
    }

  }
}
// -----------------------------------------------------------------------------
