// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

// OCCA parser doesn't like __global here
typedef /*__global*/ double gCeedScalar;

// OCCA parser doesn't like struct here
//typedef /*__global*/ struct BuildContext gBuildContext;

// *****************************************************************************
// OCCA parser doesn't like struct here either
//struct BuildContext { CeedInt dim, space_dim; };

// *****************************************************************************
@kernel void f_build_mass(int *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7, 
                          const CeedScalar *u, CeedScalar *v) {
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    // OCCA parser can't insert an __global here
    /*const CeedScalar *J = u + iOf7[0];
    const CeedScalar *qw = u + iOf7[1];
    CeedScalar *qd = v + oOf7[0];*/
    //const struct BuildContext *bc = (struct BuildContext*)ctx;
    const int dim = ctx[0];
    const int space_dim = ctx[1];
    const CeedInt dims = dim + 10*space_dim;
    if (dims==11) v[oOf7[0]+i] = u[iOf7[0]+i] * u[iOf7[1]+i];
    if (dims==22) v[oOf7[0]+i] = (u[iOf7[0]+i+Q*0]*u[iOf7[0]+i+Q*3]-u[iOf7[0]+i+Q*1]*u[iOf7[0]+i+Q*2])*u[iOf7[1]+i];
    if (dims==33) v[oOf7[0]+i] = (u[iOf7[0]+i+Q*0]*(u[iOf7[0]+i+Q*4]*u[iOf7[0]+i+Q*8]-u[iOf7[0]+i+Q*5]*u[iOf7[0]+i+Q*7]) -
                                  u[iOf7[0]+i+Q*1]*(u[iOf7[0]+i+Q*3]*u[iOf7[0]+i+Q*8]-u[iOf7[0]+i+Q*5]*u[iOf7[0]+i+Q*6]) +
                                  u[iOf7[0]+i+Q*2]*(u[iOf7[0]+i+Q*3]*u[iOf7[0]+i+Q*7]-u[iOf7[0]+i+Q*4]*u[iOf7[0]+i+Q*6]))*u[iOf7[1]+i];
  }
}

// *****************************************************************************
@kernel void f_apply_mass(void *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    // OCCA parser can't insert an __global here
    /*const CeedScalar *u = in + iOf7[0];
    const CeedScalar *w = in + iOf7[1];
    CeedScalar *v = out + oOf7[0];
    v[i] = w[i] * u[i];*/
    out[oOf7[0]+i] = in[iOf7[1]+i] * in[iOf7[0]+i];
  }
}
