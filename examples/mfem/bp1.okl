// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

// *****************************************************************************
@kernel void f_build_mass(int *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const int dim = ctx[0];
    const int space_dim = ctx[1];
    const CeedInt dims = dim + 10*space_dim;
    const CeedScalar *J = in + iOf7[0], *qw = in + iOf7[1];
    CeedScalar *rho = out + oOf7[0];

    if (dims == 11) {
      rho[i] = J[i] * qw[i];
    } else if (dims == 22) {
      // 0 2
      // 1 3
      rho[i] = (J[i+Q*0]*J[i+Q*3] - J[i+Q*1]*J[i+Q*2]) * qw[i];
    } else if (dims == 33) {
      // 0 3 6
      // 1 4 7
      // 2 5 8
      rho[i] = (J[i+Q*0]*(J[i+Q*4]*J[i+Q*8] - J[i+Q*5]*J[i+Q*7]) -
                J[i+Q*1]*(J[i+Q*3]*J[i+Q*8] - J[i+Q*5]*J[i+Q*6]) +
                J[i+Q*2]*(J[i+Q*3]*J[i+Q*7] - J[i+Q*4]*J[i+Q*6])) * qw[i];
    }
  }
}

// *****************************************************************************
@kernel void f_apply_mass(void *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar *u = in + iOf7[0], *w = in + iOf7[1];
    CeedScalar *v = out + oOf7[0];

    v[i] = w[i] * u[i];
  }
}
