// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;
typedef __global double gCeedScalar;
typedef __global struct BuildContext gBuildContext;

// *****************************************************************************
struct BuildContext { CeedInt dim, space_dim; };

// *****************************************************************************
kernel void f_build_mass(void *ctx, CeedInt Q,
                        const CeedScalar *const *in, CeedScalar *const *out) {
    CeedScalar *J = (CeedScalar*)in[0];
    CeedScalar *qw = (CeedScalar*)in[1];
    CeedScalar *qd = (CeedScalar*)out[0];
  for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
    if (i >= Q) continue;
    if (dims==11) qd[i] = J[i] * qw[i];
    if (dims==22) qd[i] = (J[i+Q*0]*J[i+Q*3]-J[i+Q*1]*J[i+Q*2])*qw[i];
    if (dims==33) qd[i] = (J[i+Q*0]*(J[i+Q*4]*J[i+Q*8]-J[i+Q*5]*J[i+Q*7]) -
                           J[i+Q*1]*(J[i+Q*3]*J[i+Q*8]-J[i+Q*5]*J[i+Q*6]) +
                           J[i+Q*2]*(J[i+Q*3]*J[i+Q*7]-J[i+Q*4]*J[i+Q*6]))*qw[i];
  }
}

// *****************************************************************************
kernel void f_apply_mass(void *ctx, CeedInt Q,
                        const CeedScalar *const *in, CeedScalar *const *out) {
  CeedScalar *u = (CeedScalar*)in[0];
  CeedScalar *w = (CeedScarar*)in[1];
  CeedScalar *v = (CeedScalar*)out[0];
  for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
    if (i >= Q) continue;
    v[i] = w[i] * u[i];
  }
}
