// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;
typedef /*__global*/ double gCeedScalar;

// *****************************************************************************
@kernel void setup(void *ctx, /*const CeedInt e, */CeedInt Q,
                   const CeedScalar *in, /*const CeedScalar *bu,*/
                   CeedScalar *out) {
   for (/*CeedI*/int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
      //if (i >= Q) continue;
      //gCeedScalar *w = ((gCeedScalar*)qdata)+e*Q;
      //const gCeedScalar *u0 = u;
      const CeedScalar *w = in + 0;
      CeedScalar *qdata = out + 0;
      //const CeedInt offset = e*(Q*NC*(DIM+2));
      //const gCeedScalar *bu0 = bu+offset;
      //if (fabs(u0[i]-bu0[i])>epsilon) continue;
      qdata[i] = w[i];
   }
}

// *****************************************************************************
@kernel void mass(void *ctx, /*const CeedInt e, */CeedInt Q,
                  const CeedScalar *in, /*const CeedScalar *bu,*/
                  CeedScalar *out/*, CeedScalar *bv*/) {
  for (/*CeedI*/int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
     //if (i >= Q) continue;
     //const gCeedScalar *w = qdata + e*Q;
    const CeedScalar *qdata = in + 0;
    const CeedScalar *u = in + Q;
    //printf("\tqdata=%f, u=%f\n",qdata[i],u[i]);
    CeedScalar *v = out + 0;
    //const CeedInt offset = e*(Q*NC*(DIM+2));
    //const gCeedScalar *bu0 = bu+offset;
    //if (fabs(u[i]-bu0[i])>epsilon) continue;
    //v0[i] = w[i] * u[i];
    v[i] = qdata[i] * u[i];
  }
}
