// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

// *****************************************************************************
@kernel void setup(int *ctx, CeedInt Q,
                   const int *iOf7, const int *oOf7,
                   const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *J = in + iOf7[0],
//    *qw = in + iOf7[1];
//  CeedScalar
//    *qd = out + oOf7[0];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    // J: 0 2   qd: 0 1   adj(J):  J22 -J12
    //    1 3       1 2           -J21  J11
    const CeedScalar J11 = in[iOf7[0]+i+Q*0];
    const CeedScalar J21 = in[iOf7[0]+i+Q*1];
    const CeedScalar J12 = in[iOf7[0]+i+Q*2];
    const CeedScalar J22 = in[iOf7[0]+i+Q*3];
    const CeedScalar w = in[iOf7[1]+i] / (J11*J22 - J21*J12);
    out[oOf7[0]+i+Q*0] =   w * (J12*J12 + J22*J22);
    out[oOf7[0]+i+Q*1] =   w * (J11*J11 + J21*J21);
    out[oOf7[0]+i+Q*2] = - w * (J11*J12 + J21*J22);
  }
}

// *****************************************************************************
@kernel void diff(int *ctx, CeedInt Q,
                  const int *iOf7, const int *oOf7,
                  const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *ug = in + iOf7[0],
//    *qd = in + iOf7[1];
//  CeedScalar *vg = out + oOf7[0];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar ug0 = in[iOf7[0]+i+Q*0];
    const CeedScalar ug1 = in[iOf7[0]+i+Q*1];
    out[oOf7[0]+i+Q*0] = in[iOf7[1]+i+Q*0]*ug0 + in[iOf7[1]+i+Q*2]*ug1;
    out[oOf7[0]+i+Q*1] = in[iOf7[1]+i+Q*2]*ug0 + in[iOf7[1]+i+Q*1]*ug1;
  }
}

// *****************************************************************************
@kernel void diff_lin(int *ctx, CeedInt Q,
                      const int *iOf7, const int *oOf7,
                      const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *ug = in + iOf7[0],
//    *qd = in + iOf7[1];
//  CeedScalar *vg = out + oOf7[0];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const CeedScalar ug0 = in[iOf7[0]+i+Q*0];
    const CeedScalar ug1 = in[iOf7[0]+i+Q*1];
    out[oOf7[0]+i+Q*0] = in[iOf7[1]+i+Q*0]*ug0 + in[iOf7[1]+i+Q*1]*ug1;
    out[oOf7[0]+i+Q*1] = in[iOf7[1]+i+Q*2]*ug0 + in[iOf7[1]+i+Q*3]*ug1;
  }
}
