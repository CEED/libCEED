language: c

os: linux
dist: bionic

addons:
  apt:
    update: true
    packages:
    - gfortran
    - liblapack-dev
    - libopenblas-dev
    - valgrind-dbg
    - lcov
    - astyle
  homebrew:
    packages:
    - ccache
    - gcc
    - lapack
    - openblas

jobs:
  include:
# Linux GCC + Codecov
   - name: "Linux GCC + CodeCov"
     os: linux
     dist: bionic
     arch: amd64
     compiler: gcc
     env: FC=gfortran
# Linux Clang + Tidy and Style
   - name: "Linux Clang + Tidy and Style"
     os: linux
     dist: bionic
     arch: amd64
     compiler: clang
     env: FC=gfortran
# Linux ICC
   - name: "Linux ICC"
     os: linux
     dist: bionic
     arch: amd64
     compiler: icc
     env:
       - FC=ifort
       - CC=icc
       - CXX=ipp
     install:
     - source /opt/intel/oneapi/setvars.sh
     addons:
       apt:
         sources:
         - sourceline: 'deb https://apt.repos.intel.com/oneapi all main'
           key_url: 'https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB'
         packages:
         - liblapack-dev
         - libopenblas-dev
         - valgrind-dbg
         - intel-oneapi-icc
         - intel-oneapi-ipp
         - intel-oneapi-ifort
# OSX GCC
   - name: "OSX GCC"
     os: osx
     osx_image: xcode11.2
     arch: amd64
     compiler: gcc
     env: FC=gfortran
# OSX Clang
   - name: "OSX Clang"
     os: osx
     osx_image: xcode11.2
     arch: amd64
     compiler: clang
     env: FC=gfortran
# IBM Power
   - name: "IBM Power"
     os: linux
     dist: bionic
     arch: ppc64le
     compiler: gcc
     env: FC=gfortran MFEM_USE_SIMD=NO
# ARM
   - name: "ARM"
     os: linux
     dist: bionic
     arch: arm64
     compiler: gcc
     env: FC=gfortran
# Python
   - name: "Python"
     language: python
     os: linux
     dist: bionic
     arch: amd64
     compiler: gcc
     python: 3.8-dev
     install:
       - pip install -r requirements.txt
       - pip install -r requirements-test.txt
     script:
       - make info && make -j4 && export CEED_DIR=$PWD
       - pip install .
       - cd tests/python
       - python setup-qfunctions.py build
       - pytest test-*.py --ceed /cpu/self/ref/serial -vv
       - cd ../..
     after_success:
       - make style-py && git diff --exit-code;
  allow_failures:
# ARM - current intermittant issues passing with Travis
   - name: "ARM"
     os: linux
     dist: bionic
     arch: arm64
     compiler: gcc
     env: FC=gfortran

install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export PATH="/usr/local/opt/ccache/libexec:$PATH"
        && brew link --overwrite gcc;
    fi
# OCCA (pinned before OCCA changed destructor syntax)
# Note: OCCA currently intermittantly failing on ARM and IBM
  - if [[ "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        git clone https://github.com/libocca/occa.git
        && cd occa && git reset --hard 327badb && cd ..
        && make -C occa -j2
        && export OCCA_DIR=$PWD/occa;
    fi
# LIBXSMM v1.16.1
  - if [[ "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        git clone --depth=1 --branch 1.16.1 https://github.com/hfp/libxsmm.git
        && make -C libxsmm -j2
        && export XSMM_DIR=$PWD/libxsmm;
    fi
# MFEM v4.1
  - git clone --depth 1 --branch v4.1 https://github.com/mfem/mfem.git
        && make -C mfem -j2 serial CXXFLAGS="-O -std=c++11" MFEM_USE_SIMD=${MFEM_USE_SIMD}
        && export MFEM_DIR=$PWD/mfem
# Nek5k v19.0
  - git clone --depth 1 --branch v19.0 https://github.com/Nek5000/Nek5000.git
        && cd Nek5000/tools && ./maketools genbox genmap reatore2 && cd ../..
        && export NEK5K_DIR=$PWD/Nek5000 PATH=$PWD/Nek5000/bin:$PATH MPI=0;
# PETSc
  - PETSC_COMMIT=afc36f2e62dc81f9d8cae345c2c65c61f89b0500 # master 2020-05-13
  - export PETSC_INSTALL=$HOME/install/petsc-$PETSC_COMMIT
  - test -s "$PETSC_INSTALL/lib/pkgconfig/PETSc.pc"
        || (  curl -O https://gitlab.com/petsc/petsc/-/archive/$PETSC_COMMIT/petsc-$PETSC_COMMIT.tar.gz
        && rm -rf $HOME/install/petsc*
        && tar xf petsc-$PETSC_COMMIT.tar.gz
        && cd petsc-$PETSC_COMMIT
        && ./configure --with-debugging=0 CC=$CC COPTFLAGS=-O --with-mpi=0 --with-fc=0 --with-cxx=0 --prefix=$PETSC_INSTALL
        && make
        && make install )
  - export PETSC_DIR=$PETSC_INSTALL

script:
  - if [[ "$CC" == "gcc" && "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        export COVERAGE=1;
    fi
  - make info
  - make -j2
  - make -j2 prove-all PROVE_OPTS=-v
  - if [[ "$CC" = "clang" && "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        clang-tidy --version && TIDY_OPTS="-fix-errors" make -j2 tidy && git diff --exit-code;
    fi
  - if [[ "$CC" = "clang" && "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        make style-c && git diff --exit-code;
    fi

after_success:
  - if [[ "$CC" == "gcc" && "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        lcov --directory . --capture --output-file coverage.info
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F interface
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F gallery
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F backends
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F tests
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F examples;
    fi

cache:
  ccache: true
  directories:
  - $HOME/install
  - $HOME/Library/Caches/Homebrew
