language: c

arch: amd64

os:
  - linux
  - osx

dist: bionic

osx_image: xcode11.2

compiler:
  - gcc
  - clang

addons:
  apt:
    update: true
    packages:
    - gfortran
    - liblapack-dev
    - libopenblas-dev
    - valgrind-dbg
    - lcov
    - astyle
  homebrew:
    packages:
    - ccache
    - gcc
    - lapack
    - openblas

env:
  - FC=gfortran

matrix:
  include:
   - os: linux
     arch: ppc64le
     compiler: gcc
     env: FC=gfortran
   - os: linux
     arch: arm64
     compiler: gcc
     env: FC=gfortran
   - language: python
     arch: amd64
     os: linux
     dist: xenial
     compiler: gcc
     python: 3.8
     install:
       - pip install -r requirements.txt
     script:
       - make info && make -j4 && export CEED_DIR=$PWD
       - pip install .
       - cd tests/python
       - python setup-qfunctions.py build
       - pytest test-*.py --ceed /cpu/self/ref/serial -vv
     after_success: skip

install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export PATH="/usr/local/opt/ccache/libexec:$PATH"
        && brew link --overwrite gcc;
    fi
# OCCA
  - git clone --depth 1 https://github.com/libocca/occa.git;
  - make -C occa -j2
  - export OCCA_DIR=$PWD/occa
# LIBXSMM v1.15 (need to use specific commit, XSMM develops on master)
  - if [[ "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        git clone https://github.com/hfp/libxsmm.git
        && cd libxsmm && git reset --hard 724205c && cd ..
        && make -C libxsmm -j2
        && export XSMM_DIR=$PWD/libxsmm;
    fi
# MFEM
  - git clone --depth 1 https://github.com/mfem/mfem.git;
  - make -C mfem -j2 serial CXXFLAGS="-O -std=c++11"
  - export MFEM_DIR=$PWD/mfem
# Nek5k
  - git clone --depth 1 https://github.com/Nek5000/Nek5000.git;
  - cd Nek5000/tools && ./maketools genbox genmap reatore2 && cd ../..;
  - export NEK5K_DIR=$PWD/Nek5000 PATH=$PWD/Nek5000/bin:$PATH MPI=0;
# PETSc
  - PETSC_COMMIT=41ae997de21eca59ba1199030b6f2b87eb581260 # master 2020-03-25
  - export PETSC_INSTALL=$HOME/install/petsc-$PETSC_COMMIT
  - test -s "$PETSC_INSTALL/lib/pkgconfig/PETSc.pc"
        || (  curl -O https://gitlab.com/petsc/petsc/-/archive/$PETSC_COMMIT/petsc-$PETSC_COMMIT.tar.gz
        && rm -rf $HOME/install/petsc*
        && tar xf petsc-$PETSC_COMMIT.tar.gz
        && cd petsc-$PETSC_COMMIT
        && ./configure --with-debugging=0 COPTFLAGS=-O --with-mpi=0 --with-fc=0 --with-cxx=0 --prefix=$PETSC_INSTALL
        && make
        && make install )
  - export PETSC_DIR=$PETSC_INSTALL

script:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        export COVERAGE=1;
    fi
  - make info
  - make -j2
  - make -j2 prove-all PROVE_OPTS=-v
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        clang-tidy --version && TIDY_OPTS="-fix-errors" make -j2 tidy && git diff --exit-code;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        make style && git diff --exit-code;
    fi

after_success:
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_CPU_ARCH" == "amd64" ]]; then
        lcov --directory . --capture --output-file coverage.info
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F interface
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F gallery
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F backends
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F tests
        && bash <(curl -s https://codecov.io/bash) -f coverage.info -F examples;
    fi

cache:
  ccache: true
  directories:
  - $HOME/install
  - $HOME/Library/Caches/Homebrew
