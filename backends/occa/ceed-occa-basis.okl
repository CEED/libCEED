// Copyright (c) 2017-2018, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory. LLNL-CODE-734707.
// All Rights reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef __global double global_double;

// *****************************************************************************
static inline int CeedPowInt(int base, int power) {
  int result = 1;
  while (power) {
    if (power & 1) result *= base;
    power >>= 1;
    base *= base;
  }
  return result;
}

// *****************************************************************************
static int kCeedTensorContract(const int transpose,
                               const int A, const int B,
                               const int C, const int J,
                               const global_double *t,
                               const int tmode,
                               const int Add,
                               const global_double *u, global_double *v) {
  const int tstride0 = transpose?1:B;
  const int tstride1 = transpose?J:1;
  for (int a=0; a<A; a++) {
    for (int j=0; j<J; j++) {
      if (!Add)
        for (int c=0; c<C; c++) v[(a*J+j)*C+c] = 0.0;
      for (int b=0; b<B; b++) {
        for (int c=0; c<C; c++) {
          const int wxs = (a*J+j)*C+c;
          const int rxs = (a*B+b)*C+c;
          v[wxs] += t[j*tstride0 + b*tstride1] * u[rxs];
          //printf("\n\t\t[kCeedTensorContract] @%d(=%f)+ @%d",wxs,v[wxs],rxs);
        }
      }
    }
  }
  return 0;
}

// *****************************************************************************
@kernel void kZero(double* d_v) {
  for (int e=0; e<nelem; e++; @tile(TILE_SIZE)) {
     //if (e >= nelem) continue;
    const int v_offset = e*(nc*elemsize);
    global_double *o_v = d_v+v_offset;
    for (int i = 0; i < vsize; i++)
      o_v[i] = 0.0;
  }
}

// *****************************************************************************
@kernel void kInterp(const int QnD,const int transpose, const int tmode,
                    double *tmp0,double *tmp1,double *interp1d,
                    double *d_u, double *d_v){
  const int P = transpose?Q1d:P1d;
  const int Q = transpose?P1d:Q1d;
  //printf("\t[kInterp] CEED_EVAL_INTERP, P=%d, Q=%d\n",P,Q);
  for (int e=0; e<nelem; e++; @tile(TILE_SIZE)) {
     //if (e >= nelem) continue;
    const int t_offset = e*tmpSz;
    global_double *eTmp0 = tmp0+t_offset;
    global_double *eTmp1 = tmp1+t_offset;
    const int u_offset = e*(nc*elemsize);
    const int v_offset = e*(QnD*nc*(dim+2));
    const global_double *o_u = d_u+(transpose?v_offset:u_offset);
    global_double *o_v = d_v+(transpose?u_offset:v_offset);
    int pre = ndof*CeedPowInt(P, dim-1), post = 1;
    //printf(", pre=%d",pre);
    //printf(", post=%d",post);
    for (int d=0; d<dim; d++) {
      //printf("\n[kInterp] d=%d",d);
      //printf(", d==0: %s",d==0?"yes":"no");
      //printf(", d%%2=%d ",d%2);
      //printf(", d==dim-1: %s",d==dim-1?"yes":"no");
      //printf(", (d+1)%%2=%d ",(d+1)%2);
      kCeedTensorContract(transpose,
                          pre,P,post,Q,
                          interp1d, tmode,
                          transpose&&(d==dim-1),
                          d==0?o_u:((d%2)==0)?eTmp0:eTmp1,
                          d==dim-1?o_v:(((d+1)%2)==0)?eTmp0:eTmp1);
      pre /= P;
      post *= Q;
    }
    if (!transpose) o_v += nqpt;
    else o_u += nqpt;
  }
}

// *****************************************************************************
@kernel void kGrad(const int QnD, const int transpose, const int tmode,
                  double *tmp0, double *tmp1, double *grad1d, double *interp1d,
                  double *d_u, double *d_v){
  const int P = transpose?Q1d:P1d;
  const int Q = transpose?P1d:Q1d;
  //printf("\n[kGrad] CEED_EVAL_GRAD, P=%d, Q=%d, transpose:%s",P,Q,transpose?"yes":"no");
  for (int e=0; e<nelem; e++; tile(TILE_SIZE)) {
     //if (e >= nelem) continue;
    const int t_offset = e*tmpSz;
    global_double *eTmp0 = tmp0+t_offset;
    global_double *eTmp1 = tmp1+t_offset;
    const int u_offset = e*(nc*elemsize);
    // Interp   Grad         Weight
    // QnD*nc + QnD*nc*dim + QnD*nc
    const int v_shift = QnD*nc;
    const int v_offset = e*(QnD*nc*(dim+2))+v_shift;
    const global_double *o_u = d_u+(transpose?v_offset:u_offset);
    global_double *o_v = d_v+(transpose?u_offset:v_offset);
    for (int p=0; p<dim; p++) {
      int pre = ndof*CeedPowInt(P,dim-1);
      int post = 1;
      for (int d=0; d<dim; d++) {
        //printf("\n\t\t[kGrad] e #%d: v_offset=%d, p=%d, d=%d, pre=%d, post=%d, d==0:%s d%%2=%d d==dim-1: %s, (d+1)%%2=%d",e,v_offset,p,d,pre,post,d==0?"yes":"no",d%2,d==dim-1?"yes":"no",(d+1)%2);
        kCeedTensorContract(transpose,
                            pre,P,post,Q,
                            (p==d)?grad1d:interp1d,
                            tmode, transpose&&(d==dim-1),
                            d==0?o_u:((d%2)==0)?eTmp0:eTmp1,
                            d==dim-1?o_v:(((d+1)%2)==0)?eTmp0:eTmp1);
        pre /= P;
        post *= Q;
      }
      if (!transpose) o_v += nqpt;
      else o_u += nqpt;
    }
  }
}

// *****************************************************************************
@kernel void kWeight(const int QnD, const int Q, double *qweight1d,
                    double* d_v){
  for (int e=0; e<nelem; e++; @tile(TILE_SIZE,@outer,@inner)) {
    if (e >= nelem) continue;
    // Interp   Grad         Weight
    // QnD*nc + QnD*nc*dim + QnD*nc
    const int v_shift = QnD*nc+QnD*nc*dim;
    const int v_offset = e*(QnD*nc*(dim+2))+v_shift;
    global_double *v = d_v+v_offset;
    //printf("\n[kWeight] elem #%d, Q=%d, QnD=%d, v_nqpt=%d, v_offset=%d",e,Q,QnD,QnD*nc+QnD*nc*dim,v_offset);
    for (int d=0; d<dim; d++) {
      const int pre = CeedPowInt(Q,dim-d-1);
      const int post = CeedPowInt(Q,d);
      //printf("\n\tpre=%d",pre);printf(", post=%d",post);
       for (int i=0; i<pre; i++) {
        for (int j=0; j<Q; j++) {
          for (int k=0; k<post; k++) {
            const int xs = (i*Q+j)*post+k;
            v[xs] = qweight1d[j]*(d==0?1.0:v[xs]);
            //printf("\n\t\td=%d, i=%d, j=%d, k=%d xs=%d v=%f",d,i,j,k,xs,v[xs]);
          }
        }
      }
    }
  }
}
